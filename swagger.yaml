---
openapi: 3.0.1
info:
  title: ReturnZone
  description: ReturnZone - 분실물 반환 중개 서비스
  version: 1.0.0
servers:
- url: https://15.164.234.32.nip.io
  description: 배포 서버
- url: http://localhost:8080
  description: 로컬 개발 서버
security:
- bearerAuth: []
tags:
- name: MyPage
  description: 마이페이지 관련 API
- name: Payment
  description: 현상금 지급 및 관리자 포인트 충전 API
- name: Test
  description: S3 업로드 및 DB 저장 테스트 API
- name: 회원 API
  description: 회원가입, 로그인 등 회원 관련 API
- name: LostPost
  description: 분실물 관련 API
- name: 인증 API
  description: 카카오 로그인 등 인증 관련 API
- name: Search
  description: 검색 및 최근 검색어 관련 API
- name: Chat
  description: 채팅 관련 API
paths:
  "/api/v1/payments/reward/{postId}":
    get:
      tags:
      - Payment
      summary: 게시글 현상금 조회
      description: 특정 게시글에 설정된 현상금 금액을 조회합니다.
      operationId: getReward
      parameters:
      - name: postId
        in: path
        description: 현상금을 조회할 게시글 ID
        required: true
        schema:
          type: integer
          format: int64
        example: 1
      responses:
        '200':
          description: 현상금 조회 성공
          content:
            "*/*":
              schema:
                type: number
        '400':
          description: 게시글을 찾을 수 없습니다.
          content:
            "*/*":
              schema:
                type: string
    put:
      tags:
      - Payment
      summary: 게시글 현상금 수정
      description: 특정 게시글에 설정된 현상금 금액을 수정합니다. (게시글 작성자만 가능하도록 서비스에서 검증 필요)
      operationId: updateReward
      parameters:
      - name: postId
        in: path
        description: 현상금을 수정할 게시글 ID
        required: true
        schema:
          type: integer
          format: int64
        example: 1
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RewardDto"
        required: true
      responses:
        '200':
          description: 현상금 수정 완료
          content:
            "*/*":
              schema:
                type: string
        '400':
          description: 게시글을 찾을 수 없거나 권한이 없습니다.
          content:
            "*/*":
              schema:
                type: string
  "/api/v1/mypage":
    get:
      tags:
      - MyPage
      summary: 마이페이지 조회
      description: 마이페이지를 조회합니다.
      operationId: getMyPage
      responses:
        '200':
          description: 마이페이지 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MyPageResponseDto"
    put:
      tags:
      - MyPage
      summary: 마이페이지 수정
      description: 마이페이지를 수정합니다.
      operationId: updateMyPage
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - image
              - updateMyPageRequestDto
              type: object
              properties:
                updateMyPageRequestDto:
                  "$ref": "#/components/schemas/UpdateMyPageRequestDto"
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: 마이페이지 수정 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MyPageResponseDto"
  "/api/v1/lostPosts/{lostPostId}":
    get:
      tags:
      - LostPost
      summary: 분실물 정보 상세 조회
      description: 분실물의 상세 정보를 조회합니다.
      operationId: getLostPost
      parameters:
      - name: lostPostId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: 분실물 정보 상세 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/LostPostResponseDto"
    put:
      tags:
      - LostPost
      summary: 분실물 게시글 수정
      description: 특정 분실물 게시글을 수정합니다.
      operationId: updateLostPost
      parameters:
      - name: lostPostId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - requestDto
              type: object
              properties:
                requestDto:
                  "$ref": "#/components/schemas/LostPostRequestDto"
                images:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200':
          description: 게시글 수정 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/LostPostResponseDto"
        '400':
          description: 유효성 검사 실패 또는 잘못된 요청
        '404':
          description: 게시글을 찾을 수 없음
    delete:
      tags:
      - LostPost
      summary: 분실물 게시글 삭제
      description: 특정 분실물 게시글을 삭제합니다.
      operationId: deleteLostPost
      parameters:
      - name: lostPostId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '204':
          description: 게시글 삭제 성공 (반환 내용 없음)
        '404':
          description: 게시글을 찾을 수 없음
  "/api/v1/test/upload":
    post:
      tags:
      - Test
      summary: 테스트 파일 업로드 및 DB 저장
      description: 이미지 파일과 텍스트를 받아 S3에 업로드하고, 그 정보를 DB에 저장합니다.
      operationId: uploadFile
      requestBody:
        description: 업로드할 이미지 파일과 이미지 설명 텍스트
        content:
          multipart/form-data:
            schema:
              "$ref": "#/components/schemas/TestFileUploadRequest"
      responses:
        '200':
          description: 파일 업로드 및 DB 저장 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TestFileEntity"
        '400':
          description: 잘못된 요청 또는 파일 업로드 실패
        '500':
          description: 서버 내부 오류
  "/api/v1/payments/pay-reward":
    post:
      tags:
      - Payment
      summary: 현상금 지급
      description: 거래 완료 시 게시글 작성자가 채팅 상대에게 현상금을 지급합니다. 지급자의 총 포인트에서 차감되고 수령자의 총 포인트
        및 환전 가능 포인트에 추가됩니다.
      operationId: payReward
      parameters:
      - name: receiverId
        in: query
        description: 현상금 수령자 회원 ID
        required: true
        schema:
          type: integer
          format: int64
        example: 2
      - name: rewardAmount
        in: query
        description: 지급할 현상금 포인트
        required: true
        schema:
          type: number
        example: 10000
      responses:
        '200':
          description: 현상금 지급 성공
          content:
            "*/*":
              schema:
                type: string
        '400':
          description: 포인트 부족 또는 회원 정보 오류
          content:
            "*/*":
              schema:
                type: string
  "/api/v1/payments/add-points":
    post:
      tags:
      - Payment
      summary: 관리자 포인트 충전
      description: 관리자가 특정 회원에게 직접 포인트를 충전합니다. 총 포인트와 환전 가능 포인트에 모두 추가됩니다.
      operationId: addPoints
      parameters:
      - name: memberId
        in: query
        description: 포인트를 충전할 회원 ID
        required: true
        schema:
          type: integer
          format: int64
        example: 3
      - name: points
        in: query
        description: 충전할 포인트 수량
        required: true
        schema:
          type: number
        example: 50000
      responses:
        '200':
          description: 포인트 충전 성공
          content:
            "*/*":
              schema:
                type: string
        '400':
          description: 회원 정보 오류
          content:
            "*/*":
              schema:
                type: string
  "/api/v1/mypage/exchange":
    get:
      tags:
      - MyPage
      summary: 환전 내역 조회
      description: 회원의 환전 내역을 조회합니다. (관리자 용)
      operationId: getMyExchanges
      responses:
        '200':
          description: 환전 내역 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ExchangeResponseDto"
    post:
      tags:
      - MyPage
      summary: 환전하기
      description: 환전을 요청합니다.
      operationId: exchange
      responses:
        '200':
          description: 환전 요청 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MyPageResponseDto"
  "/api/v1/members/signup":
    post:
      tags:
      - 회원 API
      summary: 회원가입
      description: 회원가입을 진행합니다. (비밀번호는 최소 8자 이상이어야 합니다.)
      operationId: signup
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SignupRequestDto"
        required: true
      responses:
        '201':
          description: 회원가입 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SignupResponseDto"
  "/api/v1/members/refresh":
    post:
      tags:
      - 회원 API
      summary: 토큰 재발급
      description: Refresh Token을 재발급 합니다.
      operationId: refresh
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/JwtTokenRequestDto"
        required: true
      responses:
        '200':
          description: 새로운 리프레시 토큰 반환
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/LoginResponseDto"
        '400':
          description: 리프레시 토큰 불일치
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/LoginResponseDto"
        '404':
          description: 리프레시 토큰 조회 실패
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/LoginResponseDto"
        '420':
          description: 만료된 리프레시 토큰입니다.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/LoginResponseDto"
  "/api/v1/members/logout":
    post:
      tags:
      - 회원 API
      summary: 로그아웃
      description: 현재 로그인된 세션을 무효화하여 로그아웃합니다.
      operationId: logout
      responses:
        '200':
          description: 로그아웃 성공
          content:
            "*/*":
              schema:
                type: string
        '400':
          description: 로그인되지 않은 상태
          content:
            "*/*":
              schema:
                type: string
  "/api/v1/members/login":
    post:
      tags:
      - 회원 API
      summary: 로그인
      description: 이메일과 비밀번호로 로그인합니다.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/LoginRequestDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/LoginResponseDto"
  "/api/v1/lostPosts":
    get:
      tags:
      - LostPost
      summary: 분실물 목록 조회
      description: 분실물 목록을 조회합니다. (기본값은 최신순 정렬)
      operationId: getLostPostList
      parameters:
      - name: registrationType
        in: query
        description: 주인 찾아요 / 분실했어요
        required: false
        schema:
          type: string
          enum:
          - LOST
          - FOUND
        example: LOST / FOUND
      - name: sort
        in: query
        description: '정렬 방식<br>• **LATEST**: 최신순<br>• **DISTANCE**: 거리순(위·경도 필수)'
        required: false
        schema:
          type: string
          enum:
          - LATEST
          - DISTANCE
      - name: latitude
        in: query
        description: 현재 위치 **위도**(거리순 정렬 시 필수)
        required: false
        schema:
          type: number
          format: double
        example: 37.5665
      - name: longitude
        in: query
        description: 현재 위치 **경도**(거리순 정렬 시 필수)
        required: false
        schema:
          type: number
          format: double
        example: 126.978
      - name: instant
        in: query
        description: "`true` : 즉시 정산 가능 글만"
        required: false
        schema:
          type: boolean
        example: true
      - name: category
        in: query
        description: '카테고리 필터 (예: 전자기기, 지갑/가방)'
        required: false
        schema:
          type: string
        example: 전자기기
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 10
      responses:
        '200':
          description: 분실물 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SimpleLostPostResponseDto"
    post:
      tags:
      - LostPost
      summary: 분실물 게시글 등록
      description: 새로운 분실물 게시글을 등록합니다.
      operationId: createLostPost
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - requestDto
              type: object
              properties:
                requestDto:
                  "$ref": "#/components/schemas/LostPostRequestDto"
                images:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: 게시글 등록 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/LostPostResponseDto"
        '400':
          description: 유효성 검사 실패 또는 잘못된 요청
  "/api/v1/chats/rooms":
    get:
      tags:
      - Chat
      summary: 채팅방 목록 조회
      description: 채팅방 목록을 조회합니다.
      operationId: getChatRooms
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        '200':
          description: 채팅방 목록 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ChatRoomResponseDto"
    post:
      tags:
      - Chat
      summary: 채팅방 생성
      description: 채팅방을 생성합니다.
      operationId: addChatRoom
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AddChatRoomRequestDto"
        required: true
      responses:
        '200':
          description: 채팅방 생성 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ChatRoomResponseDto"
  "/api/v1/chats/rooms/{roomId}/read":
    post:
      tags:
      - Chat
      summary: 채팅방 읽음 처리
      description: 채팅방 읽음 처리를 합니다. 해당 채팅방의 읽음 상태를 업데이트합니다.
      operationId: markRead
      parameters:
      - name: roomId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: 채팅방 읽음 처리 성공
  "/api/v1/chats/rooms/{roomId}/messages":
    get:
      tags:
      - Chat
      summary: 채팅 목록 조회
      description: 채팅 목록을 조회합니다.
      operationId: getChats
      parameters:
      - name: roomId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        '200':
          description: 채팅 목록 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MessageResponseDto"
    post:
      tags:
      - Chat
      operationId: uploadMessage
      parameters:
      - name: roomId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - image
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/MessageContentResponseDto"
  "/api/v1/mypage/exchange/{exchangeId}":
    patch:
      tags:
      - MyPage
      summary: 환전 요청 처리
      description: 회원의 환전 요청을 처리합니다. (관리자 용)
      operationId: processExchange
      parameters:
      - name: exchangeId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: approve
        in: query
        required: true
        schema:
          type: boolean
      - name: memo
        in: query
        required: false
        schema:
          type: string
      responses:
        '200':
          description: 환전 요청 처리 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MyPageResponseDto"
  "/auth/login/kakao":
    get:
      tags:
      - 인증 API
      summary: 카카오 로그인 콜백
      description: 카카오 인가 코드를 받아 로그인/회원가입을 처리합니다.
      operationId: kakaoLogin
      parameters:
      - name: code
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/KakaoResponseLoginResponseDto"
  "/api/v1/search/recent":
    get:
      tags:
      - Search
      summary: 최근 검색어 조회
      description: 현재 로그인된 사용자의 최근 검색어 목록을 최신순으로 조회합니다.
      operationId: getRecentSearches
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: 인증 실패 (X-USER-ID 누락/잘못됨)
    delete:
      tags:
      - Search
      summary: 최근 검색어 개별 삭제
      description: 현재 로그인된 사용자의 특정 최근 검색어를 삭제합니다.
      operationId: deleteRecentSearch
      parameters:
      - name: keyword
        in: query
        description: 삭제할 검색어
        required: true
        schema:
          type: string
        example: 아이폰
      responses:
        '204':
          description: 삭제 성공
        '400':
          description: 잘못된 요청 (keyword 누락)
        '401':
          description: 인증 실패
  "/api/v1/search/posts":
    get:
      tags:
      - Search
      summary: 분실물 게시글 검색
      description: 게시글 제목으로 분실물을 검색합니다. 반환 완료 여부에 따라 필터링할 수 있습니다.
      operationId: searchPosts
      parameters:
      - name: keyword
        in: query
        description: 검색할 키워드 (게시글 제목에 포함)
        required: true
        schema:
          type: string
        example: 아이폰
      - name: includeReturned
        in: query
        description: '반환 완료된 게시물 포함 여부 (true: 포함, false: 미포함)'
        required: false
        schema:
          type: boolean
          default: false
        example: false
      responses:
        '200':
          description: 검색 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/SimpleLostPostResponseDto"
        '400':
          description: 잘못된 요청 (키워드 누락 등)
  "/api/v1/mypage/lostPosts":
    get:
      tags:
      - MyPage
      summary: 내가 등록한 분실물 조회
      description: 내가 등록한 분실물들을 조회합니다.
      operationId: getMyLostPosts
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        '200':
          description: 내가 등록한 분실물 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/SimpleLostPostResponseDto"
  "/api/v1/members/email/{email}":
    get:
      tags:
      - 회원 API
      summary: 이메일 중복 확인
      description: 이메일이 이미 존재하는지 확인합니다.
      operationId: checkEmailDuplicated
      parameters:
      - name: email
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: 사용 가능 여부 반환
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: 이메일이 중복되었습니다.
          content:
            "*/*":
              schema:
                type: boolean
  "/api/v1/lostPosts/search":
    get:
      tags:
      - LostPost
      summary: 분실물 게시글 검색
      description: 게시글 제목으로 분실물을 검색합니다. 반환 완료 여부에 따라 필터링할 수 있습니다.
      operationId: searchLostPosts
      parameters:
      - name: keyword
        in: query
        description: 검색할 키워드 (게시글 제목에 포함)
        required: true
        schema:
          type: string
        example: 아이폰
      - name: includeReturned
        in: query
        description: '반환 완료된 게시물 포함 여부 (true: 포함, false: 미포함)'
        required: false
        schema:
          type: boolean
          default: false
        example: false
      responses:
        '200':
          description: 검색 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/SimpleLostPostResponseDto"
        '400':
          description: 잘못된 요청 (키워드 누락 등)
  "/api/v1/lostPosts/resolve-dong":
    get:
      tags:
      - LostPost
      summary: 카카오 맵 확인용 좌표로 동(Dong) 정보 조회 (테스트용)
      description: 위도와 경도를 입력받아 카카오맵 API를 통해 동(Dong) 정보를 포함한 주소를 반환합니다.
      operationId: resolveDongFromCoords
      parameters:
      - name: longitude
        in: query
        description: 조회할 위치의 경도
        required: true
        schema:
          type: number
          format: double
        example: 126.978
      - name: latitude
        in: query
        description: 조회할 위치의 위도
        required: true
        schema:
          type: number
          format: double
        example: 37.5665
      responses:
        '200':
          description: 주소 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Document"
        '400':
          description: 유효하지 않은 좌표
  "/api/v1/search/recent/all":
    delete:
      tags:
      - Search
      summary: 최근 검색어 전체 삭제
      description: 현재 로그인된 사용자의 모든 최근 검색어를 삭제합니다.
      operationId: deleteAllRecentSearches
      responses:
        '204':
          description: 삭제 성공
        '401':
          description: 인증 실패
  "/api/v1/chats/rooms/{roomId}":
    delete:
      tags:
      - Chat
      summary: 채팅방 나가기
      description: 채팅방을 나가고 해당 채팅방을 삭제합니다.
      operationId: deleteChatRoom
      parameters:
      - name: roomId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '204':
          description: 채팅방 나가기 성공
components:
  schemas:
    RewardDto:
      required:
      - reward
      type: object
      properties:
        reward:
          minimum: 0
          exclusiveMinimum: false
          type: number
      description: 새로운 현상금 정보
    MyPageResponseDto:
      type: object
      properties:
        nickname:
          type: string
          description: 닉네임
          example: 유저1
        imageUrl:
          type: string
          description: 프로필 이미지
        point:
          type: number
          description: 포인트
          example: 120000
        bankName:
          type: string
          description: 은행
          example: 우리은행
        accountNumber:
          type: string
          description: 계좌번호
          example: 123-456-7890123
        accountHolder:
          type: string
          description: 입금주 명
          example: 홍길동
      description: 마이페이지 정보 응답 DTO
    UpdateMyPageRequestDto:
      required:
      - accountHolder
      - accountNumber
      - bankName
      - location
      - locationDetail
      - nickname
      - password
      type: object
      properties:
        nickname:
          type: string
          description: 닉네임
          example: 유저1
        password:
          type: string
          description: 비밀번호
          example: password123
        location:
          type: string
          description: 위치
          example: 월계1동
        locationDetail:
          type: string
          description: 상세 위치
          example: 주민 센터 앞
        bankName:
          type: string
          description: 은행
          example: 국민은행
        accountNumber:
          type: string
          description: 계좌번호
          example: 1234-1234-1234
        accountHolder:
          type: string
          description: 입금주 명
          example: 유저1
      description: 마이페이지 수정 요청 DTO
    LostPostResponseDto:
      type: object
      properties:
        lostPostId:
          type: integer
          description: 분실물 ID
          format: int64
          example: 1
        imageUrls:
          type: array
          description: 이미지 URL
          example: https://your-bucket.s3.ap-northeast-2.amazonaws.com/lostPosts/lostpost1.jpg
          items:
            type: string
            description: 이미지 URL
            example: https://your-bucket.s3.ap-northeast-2.amazonaws.com/lostPosts/lostpost1.jpg
        registrationType:
          type: string
          description: 게시글 등록 유형
          example: LOST
          enum:
          - LOST
          - FOUND
        title:
          type: string
          description: 분실물 제목
          example: 소니 헤드셋
        memberId:
          type: integer
          description: 유저 ID
          format: int64
          example: 1
        memberImageUrl:
          type: string
          description: 유저 프로필
          example: https://your-bucket.s3.ap-northeast-2.amazonaws.com/lostPosts/lostpost1.jpg
        nickname:
          type: string
          description: 유저 이름
          example: 유저 1
        timeAgo:
          type: string
          description: 업로드된 지 몇 시간 전
          example: 3시간 전
        lostLocationDong:
          type: string
          description: 분실 지역(동)
          example: 월계 1동
        detailedLocation:
          type: string
          description: 상세 위치
          example: 주민센터 앞
        latitude:
          type: number
          description: 위도
          format: double
          example: 37.5665
        longitude:
          type: number
          description: 경도
          format: double
          example: 126.978
        reward:
          type: number
          description: 현상금 (원)
          example: 10000
        instantSettlement:
          type: boolean
          description: 즉시 정산 가능 여부
          example: true
        description:
          type: string
          description: 본문 내용
          example: 글 본문
        category:
          type: string
          description: 카테고리
          example: 전자기기
        itemName:
          type: string
          description: 물품명
          example: 아이폰 15 pro
        feature1:
          type: string
          description: 특징 1
          example: 빨간색
        feature2:
          type: string
          description: 특징 2
          example: 새 제품
        feature3:
          type: string
          description: 특징 3
          example: 스크래치 없음
        feature4:
          type: string
          description: 특징 4
          example: 박스 포함
        feature5:
          type: string
          description: 특징 5
          example: 정품
        lostDateTimeStart:
          type: string
          description: 분실 시작 시간
          format: date-time
        lostDateTimeEnd:
          type: string
          description: 분실 종료 시간
          format: date-time
        similarLostPosts:
          type: array
          description: 비슷한 다른 글
          items:
            "$ref": "#/components/schemas/SimpleLostPostResponseDto"
      description: 분실물 미리보기 응답 DTO
    SimpleLostPostResponseDto:
      type: object
      properties:
        lostPostId:
          type: integer
          description: 분실물 ID
          format: int64
          example: 1
        title:
          type: string
          description: 분실물 제목
          example: 소니 헤드셋
        timeAgo:
          type: string
          description: 업로드된 지 몇 시간 전
          example: 3시간 전
        location:
          type: string
          description: 위치
          example: 월계 1동
        reward:
          type: number
          description: 현상금 (원)
          example: 10000
        mainImageUrl:
          type: string
          description: 대표 이미지 URL
          example: https://your-bucket.s3.ap-northeast-2.amazonaws.com/lostPosts/lostpost1.jpg
        instantSettlement:
          type: boolean
          description: 즉시 정산 가능 여부
          example: true
        registrationType:
          type: string
          description: 게시글 등록 유형
          example: LOST
          enum:
          - LOST
          - FOUND
        status:
          type: string
          description: 분실물 상태 여부
          example: 주인 찾는 중
      description: 분실물 미리보기 응답 DTO
    LostPostRequestDto:
      required:
      - category
      - description
      - detailedLocation
      - itemName
      - latitude
      - longitude
      - lostDateTimeEnd
      - lostDateTimeStart
      - registrationType
      - reward
      - title
      type: object
      properties:
        imageUrls:
          type: array
          items:
            type: string
        registrationType:
          type: string
          description: 게시글 등록 유형
          example: LOST
          enum:
          - LOST
          - FOUND
          - LOST
          - FOUND
        title:
          maxLength: 15
          minLength: 0
          type: string
        description:
          type: string
        category:
          type: string
        itemName:
          type: string
        lostLocationDong:
          type: string
        detailedLocation:
          type: string
        longitude:
          type: number
          format: double
        latitude:
          type: number
          format: double
        lostDateTimeStart:
          type: string
          format: date-time
        lostDateTimeEnd:
          type: string
          format: date-time
        feature1:
          type: string
        feature2:
          type: string
        feature3:
          type: string
        feature4:
          type: string
        feature5:
          type: string
        reward:
          minimum: 0
          exclusiveMinimum: false
          type: number
        instantSettlement:
          type: boolean
    TestFileUploadRequest:
      type: object
      properties:
        imgFile:
          type: string
          description: 업로드할 이미지 파일
          format: binary
        imgText:
          type: string
          description: 이미지 설명 텍스트
          example: 테스트 이미지입니다.
      description: 테스트 파일 업로드 요청 스키마
    TestFileEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        imgText:
          type: string
        imgUrl:
          type: string
    SignupResponseDto:
      type: object
      properties:
        email:
          type: string
          description: 회원가입된 이메일
          example: gildong@gmail.com
        username:
          type: string
          description: 회원가입된 이름
          example: 홍길동
      description: 회원가입 응답 DTO
    SignupRequestDto:
      required:
      - email
      - password
      - username
      type: object
      properties:
        username:
          type: string
          description: 사용자의 이름
          example: 홍길동
        email:
          type: string
          description: 사용자의 이메일 주소
          example: gildong@gmail.com
        password:
          maxLength: 2147483647
          minLength: 8
          type: string
          description: 사용자의 비밀번호 (최소 8자 이상)
          example: password123
      description: 회원가입 요청 DTO
    LoginResponseDto:
      type: object
      properties:
        memberId:
          type: integer
          description: 사용자 Id
          format: int64
          example: 1
        email:
          type: string
          description: 로그인된 이메일
          example: gildong@gmail.com
        username:
          type: string
          description: 로그인된 이름
          example: 홍길동
        imageUrl:
          type: string
          description: 로그인된 프로필 이미지 URL
          example: http://example.com/profile.jpg
        accessToken:
          type: string
          description: JWT Access Token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refreshToken:
          type: string
          description: JWT Refresh Token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        accessTokenExpires:
          type: integer
          description: Access Token 만료 시간 (Epoch milliseconds)
          format: int64
          example: 7195000
        accessTokenExpiresDate:
          type: string
          description: Access Token 만료 일시 (Date)
          format: date-time
          example: '2025-05-14T15:30:00+09:00'
      description: 로그인 응답 DTO
    JwtTokenRequestDto:
      type: object
      properties:
        refreshToken:
          type: string
    LoginRequestDto:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          description: 사용자의 이메일 주소
          example: gildong@gmail.com
        password:
          type: string
          description: 사용자의 비밀번호
          example: password123
      description: 로그인 요청 DTO
    ChatRoomResponseDto:
      type: object
      properties:
        roomId:
          type: integer
          description: 채팅방 ID
          format: int64
          example: 1
        otherMemberId:
          type: integer
          description: 상대방 회원 ID
          format: int64
          example: 2
        otherMemberNickname:
          type: string
          description: 상대방 닉네임
          example: honggildong
        otherMemberProfileImage:
          type: string
          description: 상대방 프로필 이미지 URL
          example: "/images/profile/2.png"
        lastMessage:
          type: string
          description: 마지막 메시지 내용
          example: 안녕하세요!
        lastMessageAt:
          type: string
          description: 마지막 메시지 전송 시간
          format: date-time
        unreadCount:
          type: integer
          description: 읽지 않은 메시지 수
          format: int32
          example: 3
        lostPostStatus:
          type: string
          description: 분실물 상태
          example: 주인 찾는 중
      description: 채팅방 응답 DTO
    AddChatRoomRequestDto:
      type: object
      properties:
        opponentId:
          type: integer
          description: 채팅 상대 회원 ID
          format: int64
          example: 17
        lostPostId:
          type: integer
          description: 분실물 ID
          format: int64
          example: 17
      description: 채팅방 생성 요청 DTO
    MessageContentResponseDto:
      type: object
      properties:
        messageId:
          type: integer
          description: 채팅 메시지 Id
          format: int64
          example: 1
        senderId:
          type: integer
          description: 전송자 Id
          format: int64
          example: 1
        content:
          type: string
          description: 채팅 내용
          example: 안녕하세요!
        imageUrl:
          type: string
          description: 채팅 이미지 URL
        createdAt:
          type: string
          description: 채팅 전송 시간
          format: date-time
      description: 채팅 내용 응답 DTO
    KakaoResponseLoginResponseDto:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          "$ref": "#/components/schemas/LoginResponseDto"
    ExchangeResponseDto:
      type: object
      properties:
        id:
          type: integer
          description: 환전 ID
          format: int64
          example: 1
        point:
          type: number
          description: 포인트
          example: 10000
        status:
          type: string
          description: 환전 상태
          example: APPROVED
          enum:
          - PENDING
          - APPROVED
          - REJECTED
        adminMemo:
          type: string
          description: 관리자 메모
          example: 환전 승인됨
        requestedAt:
          type: string
          description: 환전 요청 시간
          format: date-time
        processedAt:
          type: string
          description: 처리 완료 시간
          format: date-time
      description: 환전 내역 응답 DTO
    Address:
      type: object
      properties:
        address_name:
          type: string
        region_3depth_name:
          type: string
        region_2depth_name:
          type: string
    Document:
      type: object
      properties:
        address_name:
          type: string
        address:
          "$ref": "#/components/schemas/Address"
        road_address:
          "$ref": "#/components/schemas/RoadAddress"
    RoadAddress:
      type: object
      properties:
        address_name:
          type: string
        region_3depth_name:
          type: string
        region_2depth_name:
          type: string
    MessageResponseDto:
      type: object
      properties:
        roomId:
          type: integer
          description: 채팅방 Id
          format: int64
          example: 1
        lostPost:
          "$ref": "#/components/schemas/SimpleLostPostResponseDto"
        messages:
          "$ref": "#/components/schemas/SliceMessageContentResponseDto"
        page:
          "$ref": "#/components/schemas/PageInfo"
      description: 채팅 정보 응답 DTO
    PageInfo:
      type: object
      properties:
        page:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        hasNext:
          type: boolean
      description: 페이징 정보
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          "$ref": "#/components/schemas/SortObject"
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        pageNumber:
          type: integer
          format: int32
        unpaged:
          type: boolean
    SliceMessageContentResponseDto:
      type: object
      properties:
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            "$ref": "#/components/schemas/MessageContentResponseDto"
        number:
          type: integer
          format: int32
        sort:
          "$ref": "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          "$ref": "#/components/schemas/PageableObject"
        empty:
          type: boolean
      description: 채팅 내용
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
  securitySchemes:
    bearerAuth:
      type: http
      name: Authorization
      in: header
      scheme: bearer
      bearerFormat: JWT
